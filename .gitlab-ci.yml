include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - project: 'gitlab-org/quality/pipeline-common'
    file:
      - '/ci/danger-review.yml'

stages:
  - prepare
  - test

variables:
  FF_USE_FASTZIP: 'true'
  TRANSFER_METER_FREQUENCY: "1s"
  DOCKER_VERSION: "20.10.15"
  BUNDLE_FROZEN: "true"
  GO_VERSION: "golang-1.21"
  GOPATH: $CI_PROJECT_DIR/.GOPATH
  DEBIAN_VERSION: "bullseye"
  RUBY_VERSION: "ruby-3.2"
  BUNDLE_PATH: vendor/ruby
  POLICY: pull
  CI_DEBUG_SERVICES: 'true'

workflow:
  rules: &workflow_rules
    # For merge requests, create a pipeline.
    - if: '$CI_MERGE_REQUEST_IID'
    # For `main` branch, create a pipeline (this includes on schedules, pushes, merges, etc.).
    - if: '$CI_COMMIT_BRANCH == "main"'
    # For tags, create a pipeline.
    - if: '$CI_COMMIT_TAG'

default:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images/debian-${DEBIAN_VERSION}-${RUBY_VERSION}-${GO_VERSION}-rust-1.65:rubygems-3.4-git-2.36-exiftool-12.60
  tags:
    - gitlab-org

.use-docker-in-docker:
  image: docker:${DOCKER_VERSION}
  services:
    - docker:${DOCKER_VERSION}-dind
  tags:
    # See https://gitlab.com/gitlab-com/www-gitlab-com/-/issues/7019 for tag descriptions
    - gitlab-org-docker

.cached-go: &cached_go
  - key:
      prefix: $GO_VERSION-cache
      files:
        - go.mod
        - go.sum
    policy: $POLICY
    paths:
      - .GOPATH/pkg/mod/

.cached-ruby: &cached_ruby
  - key:
      prefix: $RUBY_VERSION-cache
      files:
        - Gemfile.lock
    policy: $POLICY
    paths:
      - ${BUNDLE_PATH}

.cached-go-job:
  variables:
    CACHE_COMPRESSION_LEVEL: "fastest"
  cache:
    - *cached_go

.cached-ruby-job:
  cache:
    - *cached_ruby

.cached-job:
  cache:
    - *cached_go
    - *cached_ruby

.go-matrix-job:
  parallel:
    matrix:
      - GO_VERSION: ["golang-1.20", "golang-1.21"]

################################################################################
# Prepare jobs
################################################################################

bundle:install:
  stage: prepare
  extends: .cached-ruby-job
  variables:
    POLICY: pull-push
  script:
    - bundle install --jobs $(nproc)

modules:download:
  stage: prepare
  extends:
    - .cached-go-job
    - .go-matrix-job
  variables:
    POLICY: pull-push
  script:
    - go mod download

################################################################################
# Test jobs
################################################################################

.test-job:
  needs: ['bundle:install', 'modules:download']
  variables:
    GITALY_CONNECTION_INFO: '{"address":"tcp://gitaly:8075", "storage":"default"}'
  before_script:
    # Set up the environment to run integration tests (still written in Ruby)
    - make build
    - cp config.yml.example config.yml
    - go version
    - which go
  services:
    - name: registry.gitlab.com/gitlab-org/build/cng/gitaly:master
      # Disable the hooks so we don't have to stub the GitLab API
      command: ["bash", "-c", "mkdir -p /home/git/repositories && rm -rf /srv/gitlab-shell/hooks/* && touch /srv/gitlab-shell/.gitlab_shell_secret && exec /usr/bin/env GITALY_TESTING_NO_GIT_HOOKS=1 /scripts/process-wrapper"]
      alias: gitaly

tests:
  extends:
    - .cached-job
    - .go-matrix-job
    - .test-job
  script:
    - make verify test_fancy
  after_script:
    - make coverage
  coverage: '/\d+.\d+%/'
  artifacts:
    when: always
    paths:
      - cover.xml
    reports:
      junit: cover.xml

tests_without_cgo:
  extends:
    - .cached-job
    - .go-matrix-job
    - .test-job
  before_script:
    - CGO_ENABLED=0 make build
    - cp config.yml.example config.yml
    - go version
    - which go
  script:
    - make verify test_fancy

tests_without_fips:
  extends:
    - .cached-job
    - .go-matrix-job
    - .test-job
  before_script:
    - FIPS_MODE=0 make build
    - cp config.yml.example config.yml
    - go version
    - which go
  script:
    - make verify test_fancy

race:
  extends:
    - .cached-go-job
    - .go-matrix-job
    - .test-job
  script:
    - make test_golang_race

code_quality:
  extends: .use-docker-in-docker
  rules: *workflow_rules

code_navigation:
  image: sourcegraph/lsif-go:v1.9
  allow_failure: true
  script:
    - lsif-go
  artifacts:
    reports:
      lsif: dump.lsif

# SAST
semgrep-sast:
  rules: *workflow_rules

# Dependency Scanning
gemnasium-dependency_scanning:
  rules: *workflow_rules

# Secret Detection
secret_detection:
  rules: *workflow_rules

build-package-and-qa:
  trigger:
    project: 'gitlab-org/build/omnibus-gitlab-mirror'
    branch: 'master'
    strategy: depend
  inherit:
    variables: false
  variables:
    GITLAB_SHELL_VERSION: $CI_MERGE_REQUEST_SOURCE_BRANCH_SHA
    TOP_UPSTREAM_SOURCE_PROJECT: $CI_PROJECT_PATH
    TOP_UPSTREAM_SOURCE_REF: $CI_COMMIT_REF_NAME
    TOP_UPSTREAM_SOURCE_JOB: $CI_JOB_URL
    ee: "true"
  rules:
    # For MRs that change dependencies, we want to automatically ensure builds
    # aren't broken. In such cases, we don't want the QA tests to be run
    # automatically, but still available for developers to manually run.
    - if: '$CI_MERGE_REQUEST_IID'
      changes:
        - go.sum
      variables:
        BUILD_ON_ALL_OS: "true"
        MANUAL_QA_TEST: "true"
      allow_failure: false
    # For other MRs, we still provide this job as a manual job for developers
    # to obtain a package for testing and run QA tests.
    - if: '$CI_MERGE_REQUEST_IID'
      when: manual
      allow_failure: true
  needs: []

modules:tidy:
  needs: ['modules:download']
  script:
    - go mod tidy
    - git diff --exit-code go.mod go.sum

lint:
  stage: test
  script:
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
    - make lint GOLANGCI_LINT_ARGS="--out-format code-climate:gl-code-quality-report.json,line-number"
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

nilaway:
  stage: test
  before_script:
    - go install go.uber.org/nilaway/cmd/nilaway@latest
  script:
    - ${GOPATH}/bin/nilaway ./... > /tmp/out.txt 2>&1 || true
    - cat /tmp/out.txt
  allow_failure: true
